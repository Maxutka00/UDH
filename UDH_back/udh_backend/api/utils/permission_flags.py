class PermissionFlags:
    """Permission flags manager. use Permission(imported_permissions_from_db) to init.

    To set a flag use Permission.{flag}.set(bool_value) **e.g. Permission.read.set(true)**

    To get a flag use bool(Permission.{flag}). **e.g. bool(Permission.read)**

    To save a flag to a database use Permission.serialize().
    Further you can use that data to init a new Permission object"""

    def __init__(self, permissions: int = 0):
        """Use udh_backend/utils/generate/permission_enum_generate.py every time you change _PermissionsEnum"""
        self.__permissions = permissions

        # generated by udh_backend/utils/generate/permission_enum_generate.py

        # _PermissionsEnum__user_flags
        self.user = Flag(self, _PermissionsEnum.user)
        self.baned = Flag(self, _PermissionsEnum.baned)
        self.muted = Flag(self, _PermissionsEnum.muted)
        self.article_comment = Flag(self, _PermissionsEnum.article_comment)
        self.survey = Flag(self, _PermissionsEnum.survey)
        self.rating = Flag(self, _PermissionsEnum.rating)
        self.article_create = Flag(self, _PermissionsEnum.article_create)

        # _PermissionsEnum__moderator_flags
        self.moderator = Flag(self, _PermissionsEnum.moderator)
        self.article_edit_comment = Flag(self, _PermissionsEnum.article_edit_comment)
        self.article_edit_content = Flag(self, _PermissionsEnum.article_edit_content)
        self.news_create = Flag(self, _PermissionsEnum.news_create)
        self.article_delete = Flag(self, _PermissionsEnum.article_delete)

        # _PermissionsEnum__admin_flags
        self.admin = Flag(self, _PermissionsEnum.admin)
        self.manage_user = Flag(self, _PermissionsEnum.manage_user)
        self.promote_user = Flag(self, _PermissionsEnum.promote_user)
        self.demote_user = Flag(self, _PermissionsEnum.demote_user)
        self.manage_feedback = Flag(self, _PermissionsEnum.manage_feedback)
        self.manage_static_pages_content = Flag(self, _PermissionsEnum.manage_static_pages_content)
        self.TODO = Flag(self, _PermissionsEnum.TODO)

    @staticmethod
    def default_user():
        permissions = PermissionFlags()
        permissions.user.set(True)
        permissions.survey.set(True)
        permissions.article_comment.set(True)
        permissions.rating.set(True)
        permissions.article_create.set(True)
        return permissions

    def set_flag(self, value, permission):
        if not isinstance(value, bool):
            raise TypeError(f"The value has to be bool instead of \"{type(value)}\"!")
        if value:
            self.__permissions |= permission
        else:

            self.__permissions &= ~permission

    def __repr__(self):
        constructor = dict(self.__dict__)
        constructor.pop("_PermissionFlags__permissions")
        return str(constructor)

    def serialize(self):
        return self.__permissions

    def user_has(self, permission):
        return bool(self.__permissions & permission)


class Flag:
    def __init__(self, permission: PermissionFlags, shift: int):
        self.perm = permission
        self.shift = shift

    def set(self, value: bool):
        self.perm.set_flag(value, self.shift)

    def get(self):
        return bool(self.perm.user_has(self.shift))

    def __bool__(self):
        return self.get()

    def __str__(self):
        return str(self.get())

    def __repr__(self):
        return self.__str__()


class _PermissionsEnum:
    # __reserved = 1 << 11
    __user_flags = 12
    user = 1 << __user_flags
    baned = 1 << __user_flags + 1
    muted = 1 << __user_flags + 2
    article_comment = 1 << __user_flags + 3
    survey = 1 << __user_flags + 4
    rating = 1 << __user_flags + 5
    article_create = 1 << __user_flags + 6
    # __user_reserved = 1 << __user_flags + 17

    __moderator_flags = __user_flags + 17
    moderator = 1 << __moderator_flags
    article_edit_comment = 1 << __moderator_flags + 1
    article_edit_content = 1 << __moderator_flags + 2
    news_create = 1 << __moderator_flags + 3
    article_delete = 1 << __moderator_flags + 4
    # __moderator_reserved = 1 << __user_flags + 17

    __admin_flags = __moderator_flags + 17
    admin = 1 << __admin_flags
    manage_user = 1 << __admin_flags + 1
    promote_user = 1 << __admin_flags + 2
    demote_user = 1 << __admin_flags + 3
    manage_feedback = 1 << __admin_flags + 4
    manage_static_pages_content = 1 << __admin_flags + 5
    TODO = 1 << __admin_flags + 6
    # admin_reserved = 1 << __admin_flags + 17


